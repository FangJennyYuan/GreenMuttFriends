@using WebApplication1.Models
@model HomeViewModel
<!doctype html>
<meta charset="utf-8">

<script src="//d3plus.org/js/d3.js"></script>
<script src="//d3plus.org/js/d3plus.js"></script>

@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron-fluid">
    <h1>Main</h1>
    @*<img src="../Content/img/Mumu.jpg" alt="Mumu" style="width:500px;height:600px;">*@
</div>

<div class="row">
    <div class="col-8">
        <img src="~/Content/img/PhotosTaken_MainPage.png" class="img-fluid ml-1 border" style="height:200px" />
    </div>

    @{
        var myAccountModel = WebApplication1.Backend.AccountBackend.Instance.GetActiveUser();
        if (myAccountModel.isAccountLoggedIn)
        {
            <div class="col-1">
                <label for="id-of-input5" class="custom-checkbox favorite-graph">
                    <input type="checkbox" id="id-of-input5" class="favorites" />
                    <i class="fa fa-star fa-stack-1x favorited"></i>
                    <i class="fa fa-star-o fa-stack-1x not-favorited"></i>
                </label>
            </div>
        }
        else
        {

        }
    }

    <div class="col  border" valign="bottom">
        <img src="~/Content/img/UsersToday_MainPage.PNG" class="img-fluid mx-auto d-block " style="height:150px;margin-top:1.5em" />
    </div>

    @{
        if (myAccountModel.isAccountLoggedIn)
        {
            <div class="col-1">
                <label for="id-of-input6" class="custom-checkbox favorite-graph">
                    <input type="checkbox" id="id-of-input6" class="favorites" />
                    <i class="fa fa-star fa-stack-1x favorited"></i>
                    <i class="fa fa-star-o fa-stack-1x not-favorited"></i>
                </label>
            </div>
        }
        else
        {

        }
    }

</div>

<div id="image" style="display:none">
    <div class="row">
        <div class="col">
            <h3> Photos Taken <span class="graph-filtered-by date"> from May 19 to May 25th </span></h3>
        </div>
    </div>
    <div id="viz-photos-taken-impact"></div>
</div>



<div class="jumbotron-fluid">
    <h1>More Dashboards</h1>
</div>
<div class="row">
    <div class="col">
        <h2>Impact Dashboard</h2>
        <a href="/ImpactDashboard">
            <img src="~/Content/img/ImpactDashboard.PNG" width="500" height="300" />
        </a>
    </div>
    <div class="col">
        <h2>Performance Dashboard</h2>
        <a href="/Performance">
            <img src="~/Content/img/PerformanceDashboard.PNG" width="500" height="300" />
        </a>
    </div>
</div>

<script>
    window.onload = function load() {
        var checked = JSON.parse(localStorage.getItem('id-of-input3'));
        console.log(checked);
        if (checked) {
            document.getElementById("image").style.display = "block";
        } else {
            document.getElementById("image").style.display = "none";
        }
    }
    window.onload(drawPhotosTakenViz(moment().subtract(7, 'days'), moment()));

        //Draw impact graphs within a date range
    function drawPhotosTakenViz(start, end) {
        //Get data
        dataInDateRange = getDatabyDate(start, end);
        zerofilledData = zeroFillbyDate(dataInDateRange, start, end);
        updateGraphTitlesWithDate(start, end);

        //Remove old graph and add photos taken
        $("#viz-photos-taken-impact").empty();
        drawPhotosValidandInvalidGraph(dataInDateRange, "#viz-photos-taken-impact", start, end);

    }

    //Check if all date ranges have val if not fill it
    function zeroFillbyDate(totals, start, end) {

        //Iterate through date range and fill if zero
        for (var d = moment(start, "MM/DD/YYYY"); d <= end; d.add(1, 'days')) {


            //If it exists add to total
            containsDateV = containsDateInData(d.format('L'), totals);
            if (containsDateV != -1) {
                console.log(d);
            } else {
                //TODO: Remove in production, just for demo
                randInv = Math.floor(Math.random() * (1 - 0 + 1)) + 0;
                randValid = Math.floor(Math.random() * (5 - 1 + 1)) + 1;
                randInstall = Math.floor(Math.random() * (2 - 0 + 1)) + 0;
                randVal = ((randValid - randInstall < 0) ? 1 : randValid - randInstall);

                totals.push({
                    clinic: "Katsina Clinic",
                    date: d.format('L'),
                    value: randVal,
                    installs: randInstall,
                    validphotos: randValid,
                    invalidphotos: randInv
                });

                randInv = Math.floor(Math.random() * (2 - 0 + 1)) + 0;
                randValid = Math.floor(Math.random() * (8 - 1 + 1)) + 1;
                randInstall = Math.floor(Math.random() * (3 - 0 + 1)) + 0;
                randVal = ((randValid - randInstall < 0) ? 1 : randValid - randInstall);

                totals.push({
                    clinic: "Ijora Clinic",
                    date: d.format('L'),
                    value: randVal,
                    installs: randInstall,
                    validphotos: randValid,
                    invalidphotos: randInv
                });

                randInv = Math.floor(Math.random() * (2 - 0 + 1)) + 0;
                randValid = Math.floor(Math.random() * (8 - 1 + 1)) + 1;
                randInstall = Math.floor(Math.random() * (3 - 0 + 1)) + 0;
                randVal = ((randValid - randInstall < 0) ? 1 : randValid - randInstall);

                totals.push({
                    clinic: "Mashegu Clinic",
                    date: d.format('L'),
                    value: randVal,
                    installs: randInstall,
                    validphotos: randValid,
                    invalidphotos: randInv
                });

                randInv = Math.floor(Math.random() * (1 - 0 + 1)) + 0;
                randValid = Math.floor(Math.random() * (4 - 1 + 1)) + 1;
                randInstall = Math.floor(Math.random() * (2 - 0 + 1)) + 0;
                randVal = ((randValid - randInstall < 0) ? 1 : randValid - randInstall);

                totals.push({
                    clinic: "Rawayau Clinic",
                    date: d.format('L'),
                    value: randVal,
                    installs: randInstall,
                    validphotos: randValid,
                    invalidphotos: randInv
                });
            }
        }
        return totals;
    }


    //Check if date is in data set
    function containsDateInData(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i].date === obj.date) {
                return i;
            }
        }
        return -1;
    }

    //Get data by date
    function getDatabyDate(start, end) {
            data = [
            @{
                foreach (var item in Model.UserViewModel.UserList){
                    var outputString = Html.Raw("{ clinic: \"" + item.Clinic + "\", date: \"" + item.Date.ToShortDateString() + "\", value: " + item.Value + ", installs: "+ item.Installs + ", validphotos: " + item.ValidPhotoCount + ", invalidphotos: " + item.PhotoRetakeCount + " },");
                    @outputString
                }
            }
            ],
            start = start,
            end = end,
            currentData = data.filter(d => {
                var date = new moment(d.date);
                return (start <= date && date <= end);
            });
        return currentData;
    };

    

</script>