@using WebApplication1.Models
@model HomeViewModel
<!doctype html>
<meta charset="utf-8">

<script src="//d3plus.org/js/d3.js"></script>
<script src="//d3plus.org/js/d3plus.js"></script>

@{
    /**/

    ViewBag.Title = "Home Page";
}

@*Main page hearder*@
<div class="row">
    <h1>Main</h1>
</div>

@*Daily photos taken graph with current active user statistics*@
<div class="row">
    <div class="col-10">
        @*Daily Photos Taken Header*@
        <div class="row">
            <h3> Daily Photos Taken </h3>
        </div>
        @*Using d3plus to draw a bar graph. daily_photos_taken_chart is the tag to draw the graph.*@
        <div class="row">
            <div id="daily_photos_taken_chart"></div>
        </div>
    </div>



    @*Active user statistics *@
    <div class="col  my-auto">
        <div class="card impact-card">
            <div class="card-body text-center">
                <div class="text-right primary-color">
                    <span id="active-users-perc">6%</span>
                    <i class="fa fa-chevron-up"></i>
                </div>
                <div class="h1 m-0" id="active-users">9</div>
                <div class="text-muted mb-4">Active Users</div>
            </div>
        </div>
    </div>
</div>
<h3>

</h3>

@*Fav button clicked on impact/performance page will show the graphs below*@
@{
    var myAccountModel = WebApplication1.Backend.AccountBackend.Instance.GetActiveUser();
    if (myAccountModel.isAccountLoggedIn)
    {
        <div class="row">
            <h3> Favourite Graphs </h3>
        </div>
        <div class="row mt-3">
            @*Impact page with photos taken graph will appear when checked*@
            <div class="col-lg-7 ml-2" id="image" style="display:none">
                <div class="row">
                    @*Photos Taken header*@
                    <div class="col">
                        <h3> Photos Taken <span class="graph-filtered-by date"> from May 19 to May 25th </span></h3>
                    </div>
                </div>
                @*Using d3plus to draw the graph*@
                <div class="row">
                    <div id="viz-photos-taken-impact" style="width:600px"></div>
                </div>
            </div>
            @*Avg photo graph*@
            <div class="col" id="avgPhoto" style="display:none">
                <div class="row">
                    @*Graph header*@
                    <div class="col">
                        <h3> Avg Photos Taken <span class="graph-filtered-by"> by Device </span></h3>
                    </div>
                </div>
                @*Avg photo graph*@
                <div class="row">
                    <div id="avg_photos_taken_chart"></div>
                    <p class="align-bottom ml-5 pl-4 text-center"> Avg # of Photos <span class="date"> from May 19th to May 25th</span></p>
                </div>
            </div>
        </div>
    }
}



@*Preview to other Pages*@
<div class="jumbotron-fluid">
    <h1>More Dashboards</h1>
</div>
<div class="row">
    <div class="col">
        @*Impact Dashboard*@
        <h3>Impact Dashboard</h3>
        <h6>This dashboard shows project impact with photos taken, average users and average installs based on date filters.<br /> <br /> </h6>
        <a href="/ImpactDashboard">
            <img src="~/Content/img/NewImpactDashboard.PNG" style="width:100%;" />
        </a>
        @*<iframe height="300px" width="100%" src="/ImpactDashboard"></iframe>*@
    </div>
    <div class="col">
        @*Performance Dashboard*@
        <h3>Performance Dashboard</h3>
        <h6>This dashboard shows the performance of the application with photos taken by clinic and photos taken by device by location based on data filters. </h6>
        <a href="/Performance">
            <img src="~/Content/img/NewPerformanceDashboard.PNG" style="width:100%;" />
        </a>
        @*<iframe height="300px" width="100%" src="/Performance"></iframe>*@

    </div>
</div>

<script>
    //draw the total daily photos graph
    window.onload = drawDailyPhotosTakenViz(moment().subtract(7, 'days'), moment());

    //on window load, load function checks if the fav buttons are checked on the impact and performance page
    window.onload = function load() {
        //checks impact page fav button
        var photoTakenChecked = JSON.parse(localStorage.getItem('id-of-input3'));
        //checks performance page fav button
        var avgPhotoTakenChecked = JSON.parse(localStorage.getItem('id-of-input8'));

        //if photoTaken fav button is checked, show the graph
        if (photoTakenChecked) {
            document.getElementById("image").style.display = "block";
        } else {
            document.getElementById("image").style.display = "none";
        }

        //if avgPhotoTaken fav button is checked, show the graph
        if (avgPhotoTakenChecked) {
            document.getElementById("avgPhoto").style.display = "block";
        } else {
            document.getElementById("avgPhoto").style.display = "none";
        }
    }
    //draw the photos taken graph, but it doesn't get showed unless we check if fav is clicked
    window.onload(drawPhotosTakenViz(moment().subtract(7, 'days'), moment()));

    //draw the avg photo taken graph, but it doesn't get showed unless fav button is clicked
    window.onload(drawAvgPhotosTakenViz(moment().subtract(7, 'days'), moment()));

    //Draw photo submitted line graph
    function drawDailyPhotosTakenViz(start, end) {
        //Get Data
        dataInDateRange = getUserDatabyDate(start, end);
        zeroFilledDate = zeroFillbyDate(dataInDateRange, start, end);
        updateGraphTitlesWithDate(start, end);

        //remove old graph and add photos taken
        $("#daily_photos_taken_chart").empty();
        //redraw the graph
        drawDailyPhotosTakenGraph(dataInDateRange, "#daily_photos_taken_chart", start, end);
    }


    //Draw impact graphs within a date range
    function drawPhotosTakenViz(start, end) {
        //Get data
        dataInDateRange = getUserDatabyDate(start, end);
        zerofilledData = zeroFillbyDate(dataInDateRange, start, end);
        updateGraphTitlesWithDate(start, end);

        //Remove old graph and add photos taken
        $("#viz-photos-taken-impact").empty();
        drawPhotosValidandInvalidGraph(dataInDateRange, "#viz-photos-taken-impact", start, end);
    }

    //Get User/Clinic data by date
    function getUserDatabyDate(start, end) {
            data = [
            @{
                foreach (var item in Model.UserViewModel.UserList){
                    var outputString = Html.Raw("{ clinic: \"" + item.Clinic + "\", date: \"" + item.Date.ToShortDateString() + "\", value: " + item.Value + ", installs: "+ item.Installs + ", validphotos: " + item.ValidPhotoCount + ", invalidphotos: " + item.PhotoRetakeCount + " },");
                    @outputString
                }
            }
            ],
            start = start,
            end = end,
            currentData = data.filter(d => {
                var date = new moment(d.date);
                return (start <= date && date <= end);
            });
        return currentData;
    };

    //Draw overview graphs on performance page
    function drawAvgPhotosTakenViz(start, end) {
        //Get data
        currentPhotoData = getPhotoDatabyDate(start, end);

        updateGraphTitlesWithDate(start, end );

        //Remove old graph and add new
        $("#avg_photos_taken_chart").empty();
        drawAvgPhotosTakenGraph(currentPhotoData, start, end);
    }

    //Get data by date
    function getPhotoDatabyDate(start, end) {
        photosData = [
            @{
                var myViewModel = new List<TotalPhotosTakenModel>();

                //Calculate photo totals for each clinic on each day
                var clinicPhotoTotals = new Dictionary<string, int>();
                foreach (var item in Model.PhotoViewModel.PhotoList)
                {
                    int currentPhotoCount = 0;
                    var clinicAndDate = item.ClinicName + "_" + item.RecordedDateTime.ToShortDateString();
                    clinicPhotoTotals.TryGetValue(clinicAndDate, out currentPhotoCount);
                    clinicPhotoTotals[clinicAndDate] = currentPhotoCount + 1;
                }

                //Add aggregate photo totals to model by date and clinic
                foreach (KeyValuePair<string, int> entry in clinicPhotoTotals)
                {
                    string[] clinicByDate = entry.Key.Split('_');
                    string clinic = clinicByDate[0];
                    string date = clinicByDate[1];

                    //Query data to Get the users for this clinic and date
                    IEnumerable<PhotoModel> query = Model.PhotoViewModel.PhotoList.Where(
                        c => c.ClinicName == clinic
                        && c.RecordedDateTime.ToShortDateString() == date
                    );

                    //Get distinct user count
                    List<string> users = (from t in query
                                          select t.UserID).Distinct().ToList();
                    int userCount = users.Count;

                    myViewModel.Add(
                        new TotalPhotosTakenModel
                        {
                            Clinic = clinic,
                            Date = DateTime.Parse(date),
                            Value = entry.Value,
                            UserCount = userCount
                        }
                    );
                }

                foreach (var item in myViewModel)
                {
                    var photosTaken = item.Value;

                    var outputString = Html.Raw("{ clinic: \"" + item.Clinic + "\", date: \"" + item.Date.ToShortDateString() + "\", value: " + photosTaken + ", userCount: " + item.UserCount + " },");
                    @outputString
                }
            }
        ],
            start = start,
            end = end,
            currentPhotoData = photosData.filter(d => {
                var date = new moment(d.date);
                return (start <= date && date <= end);
            });
        return currentPhotoData;
    }

</script>