@using WebApplication1.Models;
@model PerformanceViewModel

<!doctype html>
<meta charset="utf-8">

<script src="//d3plus.org/js/d3.js"></script>
<script src="//d3plus.org/js/d3plus.js"></script>

@{
    ViewBag.Title = "Performance Dashboard";
}

<div>
    @*header*@
    <div class="row sticky-top">
        <div class="col-lg-7">
            <h1>
                Performance Dashboard
            </h1>
        </div>

        <div class="col mr-4 align-self-end">
            <div class="row chart-filters ">
                @*Overview icon*@
                <div class="overviewcard col-lg-5 col-sm-4 ml-2 align-self-end active-charts" id="overview-charts">
                    <div class="overviewcard__icon">
                        <i class="fa fa-camera-retro  filter-performance-ic img-valign" aria-hidden="true"></i>
                        <span>Overview</span>
                    </div>
                </div>
                @*Userview icon*@
                <div class="overviewcard col-lg-5 col-sm-4 ml-2 map-charts" id="device-charts">
                    <div class="overviewcard__icon">
                        <i class="fa fa-server  filter-performance-ic img-valign" aria-hidden="true"></i>
                        <span>Map view</span>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<div class="graphs">
    @*Date filter row*@
    <div class="row date-filter mt-1">
        @*Calender icon*@
        <div class="overviewcard__icon ml-3">
            <i class="fa fa-calendar  filter-performance-ic img-valign" aria-hidden="true"></i>
        </div>
        @*Week filter*@
        <div class="col-lg-1 col-sm-3 mt-2 calendar-filter active-date-range">
            <button type="button" id="week" onclick="getWeeksDate()"> Week</button>
        </div>
        @*Month filter*@
        <div class="col-lg-1 col-sm-3 mr-2 mt-2 calendar-filter">
            <button type="button" id="month" onclick="getMonthsDate()"> Month</button>
        </div>
        @*All filter*@
        <div class="col-lg-1 col-sm-3 mt-2 calendar-filter">
            <button type="button" id="all-date" class="calendar-filter" onclick="getYearsDate()"> All</button>
        </div>
        @*Date filter*@
        <div class="col-lg-4 mt-2">
            Date
            <input type="text" id="date-input" name="daterange" value="" />
        </div>
    </div>

    @*Graph section*@
    <div class="row mt-3 ">

        @*Photo taken graph*@
        <div class="col-lg-7 ml-2">
            <div class="row ">
                @*Graph header that is changed based on date filter*@
                <div class="col">
                    <h3> Photos Taken <span class="graph-filtered-by date"> from Month xxth to Month xxth </span></h3>
                </div>
                @*fav button*@
                <div class="col-1">
                    @{var myAccountModel = WebApplication1.Backend.AccountBackend.Instance.GetActiveUser();
                        if (myAccountModel.isAccountLoggedIn)
                        {
                            <label for="id-of-input7" class="custom-checkbox favorite-graph">
                                <input type="checkbox" id="id-of-input7" class="favorites" />
                                <i class="fa fa-star fa-stack-1x favorited"></i>
                                <i class="fa fa-star-o fa-stack-1x not-favorited"></i>
                            </label>
                        }
                        else { }}
                </div>
            </div>
            @*photos taken graph*@
            <div id="photos_taken_chart"></div>
        </div>
        @*Avg Photo based on device*@
        <div class="col">
            <div class="row">
                @*Graph header that is changed based on date filter*@
                <div class="col">
                    <h3> Avg Photos <span class="graph-filtered-by date"> from Month xxth to Month xxth </span></h3>
                </div>
                @*fav button*@
                <div class="col-1">
                    @{
                        if (myAccountModel.isAccountLoggedIn)
                        {
                            <label for="id-of-input8" class="custom-checkbox favorite-graph" onload="load()">
                                <input type="checkbox" id="id-of-input8" class="favorites" onclick="save()" />
                                <i class="fa fa-star fa-stack-1x favorited"></i>
                                <i class="fa fa-star-o fa-stack-1x not-favorited"></i>
                            </label>
                        }
                        else
                        {

                        }
                    }
                </div>
            </div>
            @*graph section*@
            <div id="avg_photos_taken_chart"></div>
        </div>
    </div>
</div>

<div class="map">
    <h5>Clinics Map</h5>
    <div class="container" id="mapdiv" style="height: 500px;"></div>
</div>



<script>
    $('.map').hide();
    $('.active-charts').click(function () {
        $('.map').hide();
        $('.graphs').show();
    });
    $('.map-charts').click(function () {
        $('.map').show();
        $('.graphs').hide();
    });


    //load the fav checkbox id-of-input8 with what is stored in localstorage
    window.onload = function load() {
        var checked = JSON.parse(localStorage.getItem('id-of-input8'));
        console.log(checked);
        document.getElementById("id-of-input8").checked = checked;
    }

    //save the fav checkbox id-of-input8 state into localstorage
    function save() {
        var checkbox = document.getElementById('id-of-input8');
        console.log(checkbox.checked);
        localStorage.setItem('id-of-input8', checkbox.checked);
    }

    //Pull Photos Data on Week
    $("#week").click(
        function () {
            start = moment().subtract(7, 'days');
            end = moment();
            drawPhotosTakenViz(start, end);
            applyButtonStyleDates(this);
        }
    );

    //Pull Photos Data on Month
    $("#month").click(
        function () {
            start = moment().startOf('month');
            end = moment();
            drawPhotosTakenViz(start, end);
            applyButtonStyleDates(this);
        }
    );

    //Pull Photos Data on Month
    $("#all-date").click(
        function () {
            start = moment("4/1/2019");
            end = moment();
            drawPhotosTakenViz(start, end);
            applyButtonStyleDates(this);
        }
    );

    //Draw overview graphs on performance page
    function drawPhotosTakenViz(start, end) {
        //Get data
        currentPhotoData = getPhotoDatabyDate( start, end );
        updateGraphTitlesWithDate(start, end );

        //Remove old graph and add new
        $("#photos_taken_chart").empty();
        drawPhotosTakenGraph(currentPhotoData);

        //Remove old graph and add new
        $("#avg_photos_taken_chart").empty();
        drawAvgPhotosTakenGraph(currentPhotoData, start, end);
    }

    //Get data by date
    function getPhotoDatabyDate(start, end) {
        photosData = [
            @{
                var myViewModel = new List<TotalPhotosTakenModel>();

                //Calculate photo totals for each clinic on each day
                var clinicPhotoTotals = new Dictionary<string, int>();
                foreach (var item in Model.PhotoViewModel.PhotoList)
                {
                    int currentPhotoCount = 0;
                    var clinicAndDate = item.ClinicName + "_" + item.RecordedDateTime.ToShortDateString();
                    clinicPhotoTotals.TryGetValue(clinicAndDate, out currentPhotoCount);
                    clinicPhotoTotals[clinicAndDate] = currentPhotoCount + 1;
                }

                //Add aggregate photo totals to model by date and clinic
                foreach (KeyValuePair<string, int> entry in clinicPhotoTotals)
                {
                    string[] clinicByDate = entry.Key.Split('_');
                    string clinic = clinicByDate[0];
                    string date = clinicByDate[1];

                    //Query data to Get the users for this clinic and date
                    IEnumerable<PhotoModel> query = Model.PhotoViewModel.PhotoList.Where(
                        c => c.ClinicName == clinic
                        && c.RecordedDateTime.ToShortDateString() == date
                    );

                    //Get distinct user count
                    List<string> users = (from t in query
                                          select t.UserID).Distinct().ToList();
                    int userCount = users.Count;

                    myViewModel.Add(
                        new TotalPhotosTakenModel
                        {
                            Clinic = clinic,
                            Date = DateTime.Parse(date),
                            Value = entry.Value,
                            UserCount = userCount
                        }
                    );
                }

                foreach (var item in myViewModel)
                {
                    var photosTaken = item.Value;

                    var outputString = Html.Raw("{ clinic: \"" + item.Clinic + "\", date: \"" + item.Date.ToShortDateString() + "\", value: " + photosTaken + ", userCount: " + item.UserCount + " },");
                    @outputString
                }
            }
        ],
            start = start,
            end = end,
            currentPhotoData = photosData.filter(d => {
                var date = new moment(d.date);
                return (start <= date && date <= end);
            });
        return currentPhotoData;
    }


    //Default views
    $("#overview-charts").trigger("click");

    /**Update Range on Calendar for Impact*/
    $(function () {
        $('input[name="daterange"]').daterangepicker({
            opens: 'left',
            startDate: moment().subtract(6, 'days'),
            endDate: moment()
        }, function (start, end, label) {
            updateGraphTitlesWithDate(start, end);
            //Draw viz
            drawPhotosTakenViz(start, end);
            });
        //Default view
        updateGraphTitlesWithDate(moment().subtract(6, 'days'), moment());
        drawPhotosTakenViz(moment().subtract(6, 'days'), moment());
    });
</script>
